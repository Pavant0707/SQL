CREATE DATABASE QUERY2
USE QUERY2

CREATE TABLE EMPLOYEE(
EID INT PRIMARY KEY,
NAME VARCHAR(100))

CREATE TABLE ATTENDENCE(
EID INT FOREIGN KEY REFERENCES EMPLOYEE(EID),
Date DATE,
ATTENDENCESID INT PRIMARY KEY,
STATUS VARCHAR(100))

INSERT INTO EMPLOYEE(EID,NAME) VALUES(1,'SAMANTHA')
INSERT INTO EMPLOYEE(EID,NAME) VALUES(2,'SAI')
INSERT INTO EMPLOYEE(EID,NAME) VALUES(3,'RAM')
INSERT INTO EMPLOYEE(EID,NAME) VALUES(4,'VISHNU')
INSERT INTO EMPLOYEE(EID,NAME) VALUES(5,'ANUSHKA')
SELECT * FROM ATTENDENCE
INSERT INTO ATTENDENCE(EID,Date,ATTENDENCESID,STATUS) VALUES(1,'2024-2-17',1001,'ABSENT')
INSERT INTO ATTENDENCE(EID,Date,ATTENDENCESID,STATUS) VALUES(2,'2024-2-16',1002,'ABSENT')
INSERT INTO ATTENDENCE(EID,Date,ATTENDENCESID,STATUS) VALUES(3,'2024-2-17',1003,'PRESENT')

SELECT * FROM ATTENDENCE WHERE EID=(SELECT EID FROM EMPLOYEE WHERE EID=1)

SELECT * FROM ATTENDENCE WHERE Date ='2024-2-17';

--Fetch employees with perfect attendance (no absences).
SELECT * FROM EMPLOYEE WHERE EID=(SELECT * FROM ATTENDENCE GROUP BY EID,STATUS HAVING STATUS='PRESENT')
SELECT * FROM EMPLOYEE LEFT JOIN ATTENDENCE
ON EMPLOYEE.EID=ATTENDENCE.ATTENDENCESID 
GROUP BY EMPLOYEE.EID,STATUS HAVING STATUS='ABSENT';


CREATE TABLE STUDENT(
STUDENTID INT PRIMARY KEY,
NAME VARCHAR(100),
COURSEID INT 
)
INSERT INTO STUDENT(STUDENTID,NAME,COURSEID) VALUES(1,'SAMATHA',1001)
INSERT INTO STUDENT(STUDENTID,NAME,COURSEID) VALUES(2,'PRABHAS',1002)
CREATE TABLE COURSE(
COURSEID INT PRIMARY KEY,
COURSENAME VARCHAR(100)
)
INSERT INTO COURSE(COURSEID,COURSENAME) VALUES(1001,'PYTHON')
INSERT INTO COURSE(COURSEID,COURSENAME) VALUES(1002,'JAVA')
CREATE TABLE GRADES(
ID INT PRIMARY KEY,
GRADE INT ,
STUDENTID INT FOREIGN KEY REFERENCES STUDENT(STUDENTID),
COURSEID INT FOREIGN KEY REFERENCES COURSE(COURSEID))
INSERT INTO GRADES(ID,GRADE,STUDENTID,COURSEID) VALUES(201,10,1,1001)
INSERT INTO GRADES(ID,GRADE,STUDENTID,COURSEID) VALUES(202,20,2,1002)
DROP TABLE GRADES
SELECT * FROM GRADES WHERE STUDENTID=1
SELECT * FROM GRADES WHERE COURSEID=1001
SELECT MAX(GRADE) FROM GRADES 
SELECT AVG(GRADE) FROM GRADES

CREATE TABLE BOOKS(
BOOKID INT PRIMARY KEY,
BOOKNAME VARCHAR(100),
Date DATE,
)
INSERT INTO BOOKS(BOOKID,BOOKNAME) VALUES(1,'LORD OF RINGS','2024-17-12')
INSERT INTO BOOKS(BOOKID,BOOKNAME) VALUES(2,'GOT','2024-16-12')

CREATE TABLE GENRE(
GID INT PRIMARY KEY,
GNAME VARCHAR(100))
INSERT INTO GENRE (GID,GNAME) VALUES(1001,'COMIC')
INSERT INTO GENRE (GID,GNAME) VALUES(1002,'FRECTION')

CREATE TABLE AUTHOR(
AUTHORID INT PRIMARY KEY,
AUTHORNAME VARCHAR(100))
INSERT INTO AUTHOR(AUTHORID,AUTHORNAME) VALUES(5001,'ROY')
INSERT INTO AUTHOR(AUTHORID,AUTHORNAME) VALUES(5002,'JSON')

CREATE TABLE BOOKINFOR(
BOOKID INT FOREIGN KEY REFERENCES BOOKS(BOOKID),
GID INT FOREIGN KEY REFERENCES GENRE(GID),
AUTHORID INT FOREIGN KEY REFERENCES AUTHOR(AUTHORID),
BID INT )

INSERT INTO BOOKINFOR(BOOKS.BOOKID,GENRE.GID,AUTHOR.AUTHORID,BOOKINFO.BID) VALUES(1,1001,5001,123)
INSERT INTO BOOKINFOR(BOOKID,GID,AUTHORID,BID) VALUES(2,1002,5002,678)

CREATE TABLE CUSTOMER(
CUSTOMERID INT,
CUSTOMERNAME VARCHAR(100),
ORDERID INT PRIMARY KEY)
INSERT INTO CUSTOMER(CUSTOMERID,CUSTOMERNAME,ORDERID) VALUES(10010,'RAM',10)
INSERT INTO CUSTOMER(CUSTOMERID,CUSTOMERNAME,ORDERID) VALUES(10020,'SAI',20)
SELECT * FROM CUSTOMER
CREATE TABLE ORDERS(
ORDERID INT FOREIGN KEY REFERENCES CUSTOMER(ORDERID),
Date DATE,
AMOUNT INT,
PRODUCT VARCHAR(100)
)
INSERT INTO ORDERS(ORDERID,Date,AMOUNT,PRODUCT) VALUES(10,'2024-02-17',100,'AAA')
INSERT INTO ORDERS(ORDERID,DATE ,AMOUNT,PRODUCT) VALUES(20,'2024-03-17',1000,'BB')
--Fetch all orders placed by a specific customer
SELECT PRODUCT FROM ORDERS WHERE ORDERID=10;
SELECT PRODUCT FROM ORDERS GROUP BY PRODUCT  HAVING PRODUCT LIKE '%AAA%'
SELECT PRODUCT FROM ORDERS WHERE Date BETWEEN Date '2024-02-17' AND Date '2024-03-17'--Incorrect syntax near '2024-02-17'
SELECT * FROM ORDERS WHERE AMOUNT>100